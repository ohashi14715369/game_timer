{"version":3,"sources":["containers/logo.svg","actions/index.js","utils/actionTypes.js","components/Test.js","containers/App.js","serviceWorker.js","reducers/gametimer.js","reducers/index.js","index.js"],"names":["module","exports","__webpack_require__","p","onTestClick","type","Test","onClick","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","Component","App","_this$props","props","actions","gametimer","className","components_Test","connect","state","ownProps","dispatch","bindActionCreators","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialAppState","arguments","length","undefined","objectSpread","reducer","combineReducers","store","createStore","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uPCE3BC,eAAc,iBAAO,CAC9BC,KCHgB,UCgBLC,cATX,SAAAA,EAAYC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QACKJ,QAAUA,EAFEC,wEAKjB,OAAOO,EAAAC,EAAAC,cAAA,UAAQV,QAASI,KAAKJ,SAAtB,eATIW,aCSbC,mLACK,IAAAC,EACwBT,KAAKU,MAAjBC,GADZF,EACCG,UADDH,EACYE,SACnB,OACEP,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACQ,EAAD,CAAMlB,QAAS,kBAAMe,EAAQlB,yBALnBc,aAqBHQ,kBAVE,SAACC,EAAOC,GAAR,MAAsB,CACrCL,UAAWI,EAAMJ,YAGnB,SAAqBM,GACnB,MAAO,CACLP,QAASQ,YAAmBR,EAASO,KAI1BH,CAA+BP,GCrBxCY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnB,QACfa,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,iBC/F3DC,EAAkB,GAWTjC,EARG,WAAqC,IAApCI,EAAoC8B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA5BD,EACvB,QADmDC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACpCtD,MACX,IJNY,OIQZ,QACI,OAAOI,OAAAmD,EAAA,EAAAnD,CAAA,GAAKkB,KCFTkC,EAJCC,YAAgB,CAC5BvC,cCOEwC,EAAQC,YAAYH,GAC1BI,IAASC,OACLnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUJ,MAAOA,GACbhD,EAAAC,EAAAC,cAACmD,EAAD,OACSC,SAASC,eAAe,SHOlC,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,cAAwBvC,OAAOC,SAASuC,MACpDC,SAAWzC,OAAOC,SAASwC,OAIvC,OAGFzC,OAAO0C,iBAAiB,OAAQ,WAC9B,IAAMrC,EAAK,GAAAsC,OAAMJ,cAAN,sBAEPzC,GAgEV,SAAiCO,EAAOC,GAEtCsC,MAAMvC,GACHK,KAAK,SAAAmC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3C,UAAUC,cAAc2C,MAAMzC,KAAK,SAAAC,GACjCA,EAAayC,aAAa1C,KAAK,WAC7BV,OAAOC,SAASoD,aAKpBjD,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAoC,CAAwBjD,EAAOC,GAI/BC,UAAUC,cAAc2C,MAAMzC,KAAK,WACjCO,QAAQC,IACN,gHAMJd,EAAgBC,EAAOC,MG9B/BE","file":"static/js/main.7eb51239.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as actionTypes from '../utils/actionTypes';\r\n\r\nexport const onTestClick = () => ({\r\n    type: actionTypes.TEST\r\n});\r\n","export const TEST = 'TEST';","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Test extends Component {\r\n    static propTypes = {\r\n        onClick: PropTypes.func.isRequired,\r\n    };\r\n    constructor(onClick) {\r\n        super();\r\n        this.onClick = onClick;\r\n    }\r\n    render() {\r\n        return <button onClick={this.onClick}>Hoge</button>;\r\n    }\r\n}\r\n\r\nexport default Test;","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport * as actions from '../actions';\n\nimport Test from '../components/Test'\n\nclass App extends Component {\n  render() {\n    const { gametimer, actions } = this.props;\n    return (\n      <div className=\"App\" >\n        <Test onClick={() => actions.onTestClick()} />\n      </div>\n    );\n  }\n}\n\nconst mapState = (state, ownProps) => ({\n  gametimer: state.gametimer,\n});\n\nfunction mapDispatch(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(mapState, mapDispatch)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../utils/actionTypes';\r\nconst initialAppState = {\r\n\r\n};\r\nconst gametimer = (state = initialAppState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.TEST:\r\n            return { ...state };\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\nexport default gametimer;","import { combineReducers } from 'redux';\r\nimport gametimer from './gametimer';\r\n\r\nconst reducer = combineReducers({\r\n    gametimer\r\n});\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}